@model List<Reminders.ViewModels.SampleTimeViewModel>
@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4" id="myTime">Welcome</h1>
</div>


@foreach (var alarm in Model)
{
    <div class="card" style="width: 18rem;">
        <div class="card-body">
            <h5 class="card-title">@alarm.Time.Hour:@FormattedMinute(alarm.Time.Minute)</h5>
            <h6 class="card-subtitle mb-2 text-muted" id="timeTillEvent">@GetRemainingTime(alarm)</h6>
            <p class="card-text">@alarm.Description</p>
            <a href="#" class="card-link">Card link</a>
            <a href="#" class="card-link">Another link</a>
        </div>
    </div>
}

<br/>

<div>
    <a class="btn btn-sm btn-primary" asp-controller="Alarm" asp-action="Add">Add</a>
</div>


<script>

    function updateTime() {
        var d = new Date().toLocaleTimeString();
        var ele = document.getElementById("myTime");
        ele.innerHTML = `The time is ${d}`;
    }

    function updateTimeTillEvent() {
        var ele = document.getElementById("timeTillEvent");

    }

    setInterval(updateTime, 100);

</script>

@functions
{
    string GetRemainingTime(Reminders.ViewModels.SampleTimeViewModel alarm)
    {
        DateTime d1 = DateTime.Now;

        DateTime dueTime = alarm.Date;
        dueTime = dueTime.AddHours(alarm.Time.Hour);
        dueTime = dueTime.AddMinutes(alarm.Time.Minute);
        dueTime = dueTime.AddSeconds(alarm.Time.Second);

        TimeSpan diff = dueTime - d1;

        //if alarm is due today
        if (d1.Date == alarm.Date.Date)
        {

            string hourText = "hours";
            string minuteText = "minutes";

            if (diff.Hours == 1)
                hourText = "hour";

            if (diff.Minutes == 1)
                minuteText = "minute";


            string res = $"{diff.Hours} {hourText} and {diff.Minutes} {minuteText} left";
            return res;
        }

        //if alarm is due within 31 days
        if((alarm.Date.Date - d1.Date.Date).TotalDays <=31)
        {
            string dayText = "days";
            string hourText = "hours";

            if (diff.Days == 1)
                dayText = "day";

            if (diff.Hours == 1)
                hourText = "hour";


            string res = $"{diff.Days} {dayText} and {diff.Hours} {hourText} left";
            return res;
        }

        return "difference too long, not implemented for this yet";
    }

    //display 0x instead of just x if x is <10, like 05 instead of 5
    string FormattedMinute(int minutes)
    {
        if (minutes >= 10)
            return minutes.ToString();

        return "0" + minutes.ToString();

    }
}