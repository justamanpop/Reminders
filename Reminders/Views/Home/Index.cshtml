@model List<Reminders.ViewModels.SampleTimeViewModel>
@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4" id="myTime">Welcome</h1>
</div>


@foreach (var alarm in Model)
{
    <div class="card" style="width: 18rem;">
        <div class="card-body">
            <h5 class="card-title">@alarm.Hour:@FormattedMinute(alarm.Minute)</h5>
            <h6 class="card-subtitle mb-2 text-muted" id="timeTillEvent">@GetRemainingTime(alarm)</h6>
            <p class="card-text">@alarm.Description</p>
            <a href="#" class="card-link">Card link</a>
            <a href="#" class="card-link">Another link</a>
        </div>
    </div>
}

<br/>

<div>
    <button class="btn btn-sm btn-primary" action="Add">Add</button>
</div>


<script>

    function updateTime() {
        var d = new Date().toLocaleTimeString();
        var ele = document.getElementById("myTime");
        ele.innerHTML = `The time is ${d}`;
    }

    function updateTimeTillEvent() {
        var ele = document.getElementById("timeTillEvent");

    }

    setInterval(updateTime, 100);

</script>

@functions
{
    string GetRemainingTime(Reminders.ViewModels.SampleTimeViewModel alarm)
    {
        DateTime d1 = DateTime.Now;
        DateTime d2 = new DateTime(d1.Year, d1.Month, d1.Day, alarm.Hour, alarm.Minute, 0);
        TimeSpan diff = d2 - d1;

        string hourText = "hours";
        string minuteText = "minutes";

        if(diff.Hours==1)
            hourText = "hour";

        if (diff.Minutes == 1)
            minuteText = "minute";


        string res = $"{diff.Hours} {hourText} and {diff.Minutes} {minuteText} left";
        return res;
    }

    string FormattedMinute(int minutes)
    {
        if (minutes >= 10)
            return minutes.ToString();

        return "0" + minutes.ToString();

    }
}