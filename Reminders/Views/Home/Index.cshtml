@model List<Reminders.ViewModels.SampleTimeViewModel>
@{
    ViewData["Title"] = "Home Page";
}

<meta http-equiv="refresh" content="60">

<div class="text-center">
    <h1 class="display-4" id="myTime">Welcome</h1>
</div>

<br />
<button id="notifyBtn" class="btn btn-lg btn-primary">Allow website to notify you</button>
<br />
<br />


@foreach (var alarm in Model)
{
    <div class="card" data-id="@alarm.Id" style="width: 18rem;">
        <div class="card-body">
            <h2 class="card-title">@alarm.Time.Hour:@FormattedMinute(alarm.Time.Minute)</h2> <h5>@FormattedDate(alarm)</h5>
            <h6 class="card-subtitle mb-2 text-muted" id="timeTillEvent">@GetRemainingTime(alarm)</h6>
            <p class="card-text">@alarm.Description</p>
            <a asp-controller="Alarm" asp-action="Edit" asp-route-id="@alarm.Id" class="card-link">Edit</a>
            <a href="/Alarm/Delete/@alarm.Id" class="card-link">Delete</a>
            <input type="hidden" class="fullDate" value="@StructuredDate(alarm.Date, alarm.Time)" />
            <input type="hidden" class="alarmType" value="@alarm.AType" />
        </div>
    </div>
}

<br />

<div>
    <a class="btn btn-sm btn-primary" asp-controller="Alarm" asp-action="Add">Add</a>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"
        integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>

<script src="~/js/notifications.js"></script>

<script src="~/js/currentTimeUpdate.js"></script>

@functions
{
    string GetRemainingTime(Reminders.ViewModels.SampleTimeViewModel alarm)
    {
        DateTime d1 = DateTime.Now;

        DateTime dueTime = alarm.Date;
        dueTime = dueTime.AddHours(alarm.Time.Hour);
        dueTime = dueTime.AddMinutes(alarm.Time.Minute);
        dueTime = dueTime.AddSeconds(alarm.Time.Second);

        TimeSpan diff = dueTime - d1;

        //if alarm is due today
        if (d1.Date == alarm.Date.Date)
        {

            string hourText = "hours";
            string minuteText = "minutes";

            if (diff.Hours == 1)
                hourText = "hour";

            if (diff.Minutes == 1)
                minuteText = "minute";


            string res = $"{diff.Hours} {hourText} and {diff.Minutes} {minuteText} left";
            return res;
        }

        //if alarm is due within 31 days
        else if ((alarm.Date.Date - d1.Date.Date).TotalDays <= 31)
        {
            string dayText = "days";
            string hourText = "hours";

            if (diff.Days == 1)
                dayText = "day";

            if (diff.Hours == 1)
                hourText = "hour";


            string res = $"{diff.Days} {dayText} and {diff.Hours} {hourText} left";
            return res;
        }

        //if time till alarm less than an year
        else if ((alarm.Date.Date - d1.Date.Date).TotalDays <= 365)
        {
            string monthText = "months";

            LocalDate curr = LocalDate.FromDateTime(DateTime.Now);
            LocalDate due = LocalDate.FromDateTime(alarm.Date.Date);

            Period period = Period.Between(curr, due);

            string dayText = $"and {period.Days} days left";

            if (period.Months==1)
                monthText="month";

            if (period.Days == 1)
                dayText = $"and {period.Days} day left";

            else if (period.Days == 0)
                dayText = "left";

            return $"Approximately {period.Months} {monthText} {dayText}";
        }

        else
        {
            string yearText = "years";

            LocalDate curr = LocalDate.FromDateTime(DateTime.Now);
            LocalDate due = LocalDate.FromDateTime(alarm.Date.Date);

            Period period = Period.Between(curr, due);

            string monthText = $"and {period.Months} months left";

            if (period.Years == 1)
                yearText = "year";

            if (period.Months == 1)
                monthText = $"and {period.Months} month left";

            else if (period.Days == 0)
                monthText = "left";

            return $"Approximately {period.Years} {yearText} {monthText}";
        }
    }

    //display 0x instead of just x if x is <10, like 05 instead of 5
    string FormattedMinute(int minutes)
    {
        if (minutes >= 10)
            return minutes.ToString();

        return "0" + minutes.ToString();

    }

    //display date in dd/mm/yyyy, but return text 'today' if the date is today, and tomorrow, if date is tomorrow.
    string FormattedDate(Reminders.ViewModels.SampleTimeViewModel alarm)
    {
        if (alarm.AType==AlarmType.Daily)
        {
            return "Daily";
        }


        DateTime now = DateTime.Now;

        if(alarm.Date.Date==now.Date.Date)
        {
            return "Today";
        }

        else if (alarm.Date.Date == now.Date.Date.AddDays(1))
        {
            return "Tomorrow";
        }

        else
        {
            return $"{alarm.Date.Day}/{alarm.Date.Month}/{alarm.Date.Year}";
        }
    }

    string StructuredDate(DateTime date, DateTime time)
    {
        return $"{date.Year.ToString()} {date.Month.ToString()} {date.Day.ToString()} {time.Hour.ToString()} {time.Minute.ToString()}";
    }
}